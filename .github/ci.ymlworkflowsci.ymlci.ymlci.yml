# CI Workflow for Circuittelligence Doctrine Template
# This workflow enforces code quality, testing, and security standards as per doctrine requirements
# TODO: Replace placeholder commands with project-specific lint/test commands
name: Continuous Integration
# Trigger on push and pull request events
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
# Environment variables
env:
  NODE_VERSION: '18'
jobs:
  
  # Secret scanning job to detect hardcoded secrets
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for secret scanning
          
      # TODO: Configure Gitleaks rules file (.gitleaks.toml) for project-specific patterns
      # TODO: Consider whitelisting false positives through Gitleaks baseline
      - name: Run Gitleaks secret detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # Upload scan reports for compliance and audit purposes
      - name: Upload Gitleaks Scan Reports
        uses: actions/upload-artifact@v4
        if: always()  # Upload artifacts even if previous steps fail
        with:
          name: gitleaks-scan-reports
          path: |
            gitleaks-report.sarif
            gitleaks-report.json
            .gitleaks/
          # TODO: Customize these paths based on your Gitleaks configuration
          # Common report locations:
          # - gitleaks-report.sarif (SARIF format for GitHub Security tab)
          # - gitleaks-report.json (JSON format for detailed analysis)
          # - .gitleaks/ (directory containing baseline and config files)
          retention-days: 30
          
  # Dependency scanning job to check for vulnerable dependencies
  dependency-scan:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # TODO: Add dependency scanning steps specific to your project type
      # Examples:
      # - For Node.js: npm audit, yarn audit, or Snyk
      # - For Python: safety, bandit, or pip-audit
      # - For Java: OWASP Dependency Check
      # - For .NET: dotnet list package --vulnerable
      
      - name: Run Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          
      # Upload dependency scan reports for compliance and audit purposes
      - name: Upload Dependency Scan Reports
        uses: actions/upload-artifact@v4
        if: always()  # Upload artifacts even if previous steps fail
        with:
          name: dependency-scan-reports
          path: |
            dependency-review-report.json
            dependency-check-report.html
            dependency-check-report.xml
            npm-audit-report.json
            safety-report.json
            snyk-report.json
          # TODO: Customize these paths based on your dependency scanning tools
          # Common report locations by tool:
          # - dependency-review-report.json (GitHub Dependency Review)
          # - dependency-check-report.html/xml (OWASP Dependency Check)
          # - npm-audit-report.json (npm audit --json > npm-audit-report.json)
          # - safety-report.json (safety check --json > safety-report.json)
          # - snyk-report.json (snyk test --json > snyk-report.json)
          retention-days: 30
          
  # Static analysis job for code quality and security
  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # TODO: Add static analysis steps specific to your project
      # Examples:
      # - CodeQL for security analysis
      # - SonarCloud for code quality
      # - ESLint for JavaScript/TypeScript
      # - Pylint/Flake8 for Python
      # - SpotBugs for Java
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript  # TODO: Update based on your project languages
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        
      # Upload static analysis reports for compliance and audit purposes
      - name: Upload Static Analysis Reports
        uses: actions/upload-artifact@v4
        if: always()  # Upload artifacts even if previous steps fail
        with:
          name: static-analysis-reports
          path: |
            codeql-report.sarif
            sonar-report.json
            eslint-report.json
            eslint-report.html
            pylint-report.txt
            pylint-report.json
            spotbugs-report.xml
          # TODO: Customize these paths based on your static analysis tools
          # Common report locations by tool:
          # - codeql-report.sarif (CodeQL SARIF output)
          # - sonar-report.json (SonarCloud/SonarQube JSON report)
          # - eslint-report.json/html (ESLint with --format json/html)
          # - pylint-report.txt/json (Pylint with --output-format text/json)
          # - spotbugs-report.xml (SpotBugs XML report)
          retention-days: 30
  
  # Auto-assign reviewers and assignees to pull requests
  auto_assign_reviewers:
    name: Auto Assign Reviewers
    runs-on: ubuntu-latest
    # Only run on pull request events, not pushes
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Auto assign reviewers and assignees
        uses: kentaro-m/auto-assign-action@v1.2.6
        with:
          configuration-path: '.github/auto_assign.yml'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # Configuration for auto-assign is stored in .github/auto_assign.yml
      # To customize reviewers, edit the auto_assign.yml file with your team members:
      #
      # addReviewers: true
      # addAssignees: true
      # reviewers:
      #   - 'tech-lead-username'      # Replace with Tech Lead GitHub username
      #   - 'security-officer-username' # Replace with Security Officer GitHub username  
      #   - 'qa-lead-username'        # Replace with QA Lead GitHub username
      #   - 'product-owner-username'  # Replace with Product Owner GitHub username
      # assignees:
      #   - 'tech-lead-username'      # Replace with Tech Lead GitHub username
      #   - 'security-officer-username' # Replace with Security Officer GitHub username
      #   - 'qa-lead-username'        # Replace with QA Lead GitHub username
      #   - 'product-owner-username'  # Replace with Product Owner GitHub username
      #
      # You can also configure team-based assignments:
      # reviewers:
      #   - '@circuittelligence/tech-leads'
      #   - '@circuittelligence/security-team'
      #   - '@circuittelligence/qa-team'
      #   - '@circuittelligence/product-team'
      #
      # Additional options:
      # numberOfReviewers: 2        # Number of reviewers to assign (default: all)
      # numberOfAssignees: 1        # Number of assignees to assign (default: all)
      # skipKeywords:               # Skip assignment if PR contains these keywords
      #   - 'wip'
      #   - 'draft'

  # Microsoft Teams notification job for CI status updates
  teams-notification:
    name: Microsoft Teams Notification
    runs-on: ubuntu-latest
    # Run after all other jobs complete, regardless of their status
    needs: [secret-scan, dependency-scan, static-analysis, auto_assign_reviewers]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # TODO: Configure Microsoft Teams webhook URL in repository secrets
      # Steps to set up Teams webhook:
      # 1. Go to your Circuittelligence Teams channel
      # 2. Click on the three dots menu (⋯) next to the channel name
      # 3. Select "Connectors" or "Workflows"
      # 4. Add "Incoming Webhook" connector
      # 5. Configure the webhook with a descriptive name like "CI Notifications"
      # 6. Copy the webhook URL
      # 7. Add the webhook URL as a repository secret named 'TEAMS_WEBHOOK_URL'
      # 8. Go to GitHub repo Settings > Secrets and variables > Actions
      # 9. Add new repository secret: TEAMS_WEBHOOK_URL with the webhook URL value
      
      # Send notification on workflow success
      - name: Send Teams notification on success
        uses: jdcargile/ms-teams-notification@v1.4
        if: ${{ needs.secret-scan.result == 'success' && needs.dependency-scan.result == 'success' && needs.static-analysis.result == 'success' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          ms-teams-webhook-uri: ${{ secrets.TEAMS_WEBHOOK_URL }}
          notification-summary: 'CI Pipeline Successful ✅'
          notification-color: '28a745'  # Green color for success
          # TODO: Customize success message content
          # You can include additional information like:
          # - Branch name: ${{ github.ref_name }}
          # - Commit hash: ${{ github.sha }}
          # - Author: ${{ github.actor }}
          # - Repository: ${{ github.repository }}
          # - Workflow run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
      # Send notification on workflow failure
      - name: Send Teams notification on failure
        uses: jdcargile/ms-teams-notification@v1.4
        if: ${{ needs.secret-scan.result == 'failure' || needs.dependency-scan.result == 'failure' || needs.static-analysis.result == 'failure' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          ms-teams-webhook-uri: ${{ secrets.TEAMS_WEBHOOK_URL }}
          notification-summary: 'CI Pipeline Failed ❌'
          notification-color: 'dc3545'  # Red color for failure
          # TODO: Customize failure message content
          # Consider including:
          # - Failed job details
          # - Link to failed workflow run
          # - Instructions for debugging
          # - Contact information for support
          
      # Send notification on workflow cancellation or other statuses
      - name: Send Teams notification on other status
        uses: jdcargile/ms-teams-notification@v1.4
        if: ${{ contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'skipped') }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          ms-teams-webhook-uri: ${{ secrets.TEAMS_webhook_URL }}
          notification-summary: 'CI Pipeline Status Update ⚠️'
          notification-color: 'ffc107'  # Yellow color for warning/other status
          # TODO: Customize notification triggers and conditions
          # You may want to adjust the conditions based on your team's needs:
          # - Only notify on failures
          # - Only notify on main branch
          # - Only notify during business hours
          # - Include different message content for different branches
          # - Add mentions for specific team members on failures
          
      # TODO: Advanced Teams notification customization options
      # Consider implementing these enhancements:
      # 
      # 1. Branch-specific notifications:
      #    - Different webhook URLs for different branches
      #    - Different notification content for main vs develop
      #    
      # 2. Conditional notifications:
      #    - Only notify on specific events (e.g., failures only)
      #    - Time-based notifications (e.g., only during business hours)
      #    
      # 3. Enhanced message content:
      #    - Include test coverage reports
      #    - Add links to deployment environments
      #    - Include security scan summaries
      #    
      # 4. Multiple Teams channels:
      #    - Developer notifications to one channel
      #    - Security alerts to security team channel
      #    - Management updates to leadership channel
      #    
      # 5. Message formatting:
      #    - Use Teams adaptive cards for rich formatting
      #    - Include action buttons for common tasks
      #    - Add relevant images or charts
